# -*- coding: utf-8 -*-
"""PREMIUM_PLAN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XfAd4ydxK_niOoTNnqZ1BRIw3L7JGmOX
"""



import os
import openai
import requests
from flask import Flask,request,jsonify
from flask_cors import CORS,cross_origin
app = Flask(__name__)
CORS(app)

@app.route('/',methods = ['GET'])
def hello_world():
    d = {}
    d['Query'] = str(request.args['Query'])
    openai.api_key = "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"
    api_key = '21XTTGBDL2CBO627'
    base_url = 'https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE'


    print("Choose a model:")
    print("1. gpt-3.5-turbo")
    print("2. gpt-3.5-turbo-0301")
    model_choice = str(request.args['model'])
    #model_choice = input("Enter model")
    prompt = str(request.args['Query'])
    prompt1 = str(request.args['Query1'])

    model_map = {
        "1": "gpt-3.5-turbo",
        "2": "gpt-3.5-turbo-0301"
    }

    if model_choice in model_map:
        selected_model = model_map[model_choice]
    else:
        print("Invalid option. Using default model gpt-3.5-turbo.")
        selected_model = "gpt-3.5-turbo"

    system_tokens = len("system")
    assistant_tokens = len("assistant")
    user_tokens = len("user")

    messages = [
        {"role": "system", "content": ""},
        {"role": "user", "content": prompt},
        {"role": "assistant", "content": prompt1}
    ]

    completion = openai.ChatCompletion.create(
        model=selected_model,
        messages=messages
    )

    response = completion['choices'][0]['message']
    print("Assistant's response:")
    print(response['content']) 

    response = completion['choices'][0]['message']
    assistant_content_tokens = len(response['content'])

    system_total_tokens = system_tokens + len(messages[0]['content'])
    user_total_tokens = user_tokens + len(messages[1]['content'])
    assistant_total_tokens = assistant_tokens + assistant_content_tokens

    total_tokens = system_total_tokens + user_total_tokens + assistant_total_tokens

    cost_per_1000_tokens = 0.002 / 1000 
    cost = cost_per_1000_tokens * total_tokens

    print(f"System Tokens: {system_total_tokens}")
    print(f"User Tokens: {user_total_tokens}")
    print(f"Assistant Tokens: {assistant_total_tokens}")
    print(f"Total Tokens: {total_tokens}")

    from_c = 'USD'
    to_c = str(request.args['lang'])
    amount = float(cost)

    main_url = f'{base_url}&from_currency={from_c}&to_currency={to_c}&apikey={api_key}'

    responsee = requests.get(main_url)
    results = responsee.json()
    key = results['Realtime Currency Exchange Rate']
    rate = float(key['5. Exchange Rate'])

    print('Converted Amount')
    print(f'{rate * amount}')
    d['system_tokens'] = system_total_tokens
    d['user_tokens'] = user_total_tokens
    d['assistant_tokens'] = assistant_total_tokens
    d['total_tokens'] = total_tokens
    d['cost'] = rate*amount
    d['response'] = response
    d['model'] = str(request.args['model'])
    d['lang'] = str(request.args['lang'])
    d['Query1'] = str(request.args['Query1'])
    return jsonify(d)

if __name__ == '__main__':
    app.debug = True
    app.run()